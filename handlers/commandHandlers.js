const config = require('../config');
const { validateToken, formatSearchResults, splitLongMessage, createProgressMessage } = require('../utils');
const { checkPNFL } = require('../api/customs');
const { parseXMLForPNFL, downloadTelegramFile, downloadZipFile, extractPnflFromZip, cleanupTempFiles } = require('../utils/fileProcessor');
const axios = require('axios');
const AdmZip = require('adm-zip');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check_pnfl
 */
async function handleCheckPnfl(bot, msg) {
  const chatId = msg.chat.id;
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!global.userStates) global.userStates = new Map();
  global.userStates.set(chatId, { step: 'waiting_csrf', action: 'check_pnfl' });
  
  await bot.sendMessage(chatId, config.messages.checkPnfl.instructions);
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
 */
async function handleTextMessage(bot, msg) {
  if (msg.document || msg.text?.startsWith('/')) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∫–æ–º–∞–Ω–¥—ã
  
  const chatId = msg.chat.id;
  const userState = global.userStates?.get(chatId);
  
  if (!userState) return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  
  if (userState.step === 'waiting_csrf') {
    // –û–∂–∏–¥–∞–µ–º x-csrf-token
    const csrfToken = msg.text.trim();
    
    if (validateToken(csrfToken)) {
      userState.csrfToken = csrfToken;
      userState.step = 'waiting_session';
      global.userStates.set(chatId, userState);
      
      await bot.sendMessage(chatId, config.messages.checkPnfl.csrfReceived);
    } else {
      await bot.sendMessage(chatId, config.messages.checkPnfl.invalidCsrf);
    }
    
  } else if (userState.step === 'waiting_session') {
    // –û–∂–∏–¥–∞–µ–º SESSION
    const session = msg.text.trim();
    
    if (validateToken(session)) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
      if (!global.userSessions) global.userSessions = new Map();
      
      const sessionData = {
        csrfToken: userState.csrfToken,
        session: session
      };
      
      global.userSessions.set(chatId, sessionData);
      global.userStates.delete(chatId); // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      
      await bot.sendMessage(chatId, config.messages.checkPnfl.sessionReceived);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏", —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
      if (userState.action === 'check_errors') {
        await startPnflCheck(bot, chatId, sessionData);
      }
      // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞ /check_pnfl, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    } else {
      await bot.sendMessage(chatId, config.messages.checkPnfl.invalidSession);
    }
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find
 */
async function handleFind(bot, msg, match) {
  const chatId = msg.chat.id;
  const searchQuery = match[1];

  if (!config.bot.allowedChatIds.includes(msg.chat.id.toString())) {
    return;
  }

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–∞—à–µ–º—É Python API
    const response = await axios.get(
      `${config.api.search.baseUrl}/search?q=${encodeURIComponent(searchQuery)}`
    );
    const results = response.data.results;

    if (!results || results.length === 0) {
      bot.sendMessage(chatId, config.messages.errors.noResults);
      return;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    const formattedResults = formatSearchResults(results);
    bot.sendMessage(chatId, formattedResults, { parse_mode: "Markdown" });
  } catch (error) {
    console.error("Search error:", error);
    bot.sendMessage(chatId, config.messages.errors.search);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ XML –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ PNFL
 */
async function handleXmlDocument(bot, msg) {
  const chatId = msg.chat.id;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!global.userSessions?.has(chatId)) {
    await bot.sendMessage(chatId, config.messages.checkPnfl.noSession);
    return;
  }
  
  try {
    // –°–∫–∞—á–∏–≤–∞–µ–º XML —Ñ–∞–π–ª
    const xmlContent = await downloadTelegramFile(msg.document.file_id, config.bot.token);
    
    // –ü–∞—Ä—Å–∏–º XML –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º PNFL
    const declarations = await parseXMLForPNFL(xmlContent);
    
    if (declarations.length === 0) {
      await bot.sendMessage(chatId, config.messages.fileProcessing.noXmlDeclarations);
      return;
    }
    
    await bot.sendMessage(chatId, 
      `${config.messages.fileProcessing.foundDeclarations.replace('{count}', declarations.length)}`
    );
    
    const sessionData = global.userSessions.get(chatId);
    const errors = [];
    const startTime = Date.now();
    let processedCount = 0;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    const progressMessage = await bot.sendMessage(chatId, createProgressMessage(0, declarations.length, startTime));
    let progressMessageId = progressMessage.message_id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º PNFL –ø–∞—á–∫–∞–º–∏
    for (let i = 0; i < declarations.length; i += config.processing.batchSize) {
      const batch = declarations.slice(i, i + config.processing.batchSize);
      
      const promises = batch.map(({ pnfl, ident_num }) => {
        return checkPNFL(pnfl, sessionData).then(result => {
          processedCount++;
          
          if (result.result !== 1) {
            errors.push({
              ident_num,
              pnfl,
              error: result.error || '–ù–µ—É—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞'
            });
          }
          return result;
        });
      });
      
      await Promise.all(promises);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
      try {
        const updatedProgressMessage = createProgressMessage(processedCount, declarations.length, startTime);
        await bot.editMessageText(updatedProgressMessage, {
          chat_id: chatId,
          message_id: progressMessageId
        });
      } catch (editError) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ');
        const newProgressMessage = await bot.sendMessage(chatId, createProgressMessage(processedCount, declarations.length, startTime));
        // –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        progressMessageId = newProgressMessage.message_id;
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, config.processing.delayBetweenBatches));
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (errors.length === 0) {
      await bot.sendMessage(chatId, config.messages.fileProcessing.allSuccess);
    } else {
      let errorMessage = `${config.messages.fileProcessing.errorsFound.replace('{count}', errors.length)}:\n\n`;
      
      for (const error of errors) {
        errorMessage += `üî∏ ${error.ident_num}\n`;
        errorMessage += `   PNFL: ${error.pnfl}\n`;
        errorMessage += `   –û—à–∏–±–∫–∞: ${error.error}\n\n`;
      }
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageChunks = splitLongMessage(errorMessage);
      for (const chunk of messageChunks) {
        await bot.sendMessage(chatId, chunk);
      }
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ XML:', error);
    await bot.sendMessage(chatId, 
      `${config.messages.errors.xmlProcessing} ${error.message}`
    );
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PNFL –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
 */
async function startPnflCheck(bot, chatId, sessionData) {
  try {
    await bot.sendMessage(chatId, config.messages.fileProcessing.processingZip);
    
    const zipFilePath = await downloadZipFile(global.currentDocument.file_id, config.bot.token, `${global.currentDocument.file_id}.zip`);

    const zip = new AdmZip(zipFilePath);
    const zipEntries = zip.getEntries();

    // –ò–∑–≤–ª–µ–∫–∞–µ–º PNFL –∏–∑ Excel —Ñ–∞–π–ª–æ–≤
    const allPNFLs = extractPnflFromZip(zipEntries);

    if (allPNFLs.length === 0) {
      await bot.sendMessage(chatId, config.messages.fileProcessing.noExcelPnfl);
      await cleanupTempFiles(zipFilePath);
      return;
    }

    await bot.sendMessage(chatId, `${config.messages.fileProcessing.foundPnfl.replace('{count}', allPNFLs.length)}`);

    const errors = [];
    const startTime = Date.now();
    let processedCount = 0;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    const progressMessage = await bot.sendMessage(chatId, createProgressMessage(0, allPNFLs.length, startTime));
    let progressMessageId = progressMessage.message_id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º PNFL –ø–∞—á–∫–∞–º–∏
    for (let i = 0; i < allPNFLs.length; i += config.processing.batchSize) {
      const batch = allPNFLs.slice(i, i + config.processing.batchSize);
      
      const promises = batch.map(({ pnfl, ident_num, fileName }) => {
        return checkPNFL(pnfl, sessionData).then(result => {
          processedCount++;
          
          if (result.result !== 1) {
            errors.push({
              ident_num,
              fileName,
              pnfl,
              error: result.error || '–ù–µ—É—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞'
            });
          }
          return result;
        });
      });
      
      await Promise.all(promises);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
      try {
        const updatedProgressMessage = createProgressMessage(processedCount, allPNFLs.length, startTime);
        await bot.editMessageText(updatedProgressMessage, {
          chat_id: chatId,
          message_id: progressMessageId
        });
      } catch (editError) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ');
        const newProgressMessage = await bot.sendMessage(chatId, createProgressMessage(processedCount, allPNFLs.length, startTime));
        // –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        progressMessageId = newProgressMessage.message_id;
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, config.processing.delayBetweenBatches));
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (errors.length === 0) {
      await bot.sendMessage(chatId, config.messages.fileProcessing.allSuccess);
    } else {
      let errorMessage = `${config.messages.fileProcessing.errorsFound.replace('{count}', errors.length)}:\n\n`;
      
      for (const error of errors) {
        errorMessage += `üî∏ ${error.ident_num}\n`;
      }
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageChunks = splitLongMessage(errorMessage);
      for (const chunk of messageChunks) {
        await bot.sendMessage(chatId, chunk);
      }
    }

    await cleanupTempFiles(zipFilePath);
  } catch (error) {
    console.error(error);
    bot.sendMessage(
      chatId,
      `${config.messages.errors.pnflCheck} ${error.message}`
    );
  }
}

module.exports = {
  handleCheckPnfl,
  handleTextMessage,
  handleFind,
  handleXmlDocument,
  startPnflCheck
}; 