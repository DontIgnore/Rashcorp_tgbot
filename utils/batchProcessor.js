const config = require('../config');
const { throttle, splitLongMessage } = require('../utils');
const { logToFile } = require('./logger');
const { fetchPassportDataV4, fetchPassportDataV2 } = require('../api/customs');
const { extractDateOfBirth } = require('../utils');
const xlsx = require("xlsx");

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
const safeUpdateMessage = async (bot, text, messageId, chatId) => {
  try {
    await bot.editMessageText(text, {
      chat_id: chatId,
      message_id: messageId,
    });
  } catch (error) {
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await bot.sendMessage(chatId, text);
    await logToFile(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ",
      "warning"
    );
  }
};

/**
 * –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
 */
async function processBatchFiles(files, sessionId, chatId, bot, batchSize = config.processing.batchSize) {
  let processedFiles = 0;
  const totalFiles = files.length;
  const allResults = [];

  // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  const progressMessage = `${config.messages.progress.processing}\n${config.messages.progress.processed} 0/${totalFiles} (0%)\n${config.messages.progress.inProcess} ${totalFiles} —Ñ–∞–π–ª–æ–≤`;
  const msgResponse = await bot.sendMessage(chatId, progressMessage);
  const messageId = msgResponse.message_id;

  // –°–æ–∑–¥–∞–µ–º throttled –≤–µ—Ä—Å–∏—é —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const throttledUpdate = throttle(async (currentProcessed) => {
    const percentage = Math.round((currentProcessed / totalFiles) * 100);
    const remaining = totalFiles - currentProcessed;
    const message = `${config.messages.progress.processing}\n${config.messages.progress.processed} ${currentProcessed}/${totalFiles} (${percentage}%)\n${config.messages.progress.remaining} ${remaining} —Ñ–∞–π–ª–æ–≤`;
    await safeUpdateMessage(bot, message, messageId, chatId);
  }, config.processing.progressUpdateInterval);

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const updateProgress = async (currentProcessed) => {
    await throttledUpdate(currentProcessed);
  };

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø–∞—á–∫–∞–º–∏
  for (let i = 0; i < files.length; i += batchSize) {
    const batch = files.slice(i, i + batchSize);
    await logToFile(
      `–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—á–∫–∏ ${Math.floor(i / batchSize) + 1}, —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞—á–∫–µ: ${batch.length}`
    );

    const batchPromises = batch.map(async (file) => {
      let currentPnfl = null;
      let currentPassport = null;

      try {
        const content = file.content;
        const workbook = xlsx.read(content, { type: "buffer" });
        const firstSheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[firstSheetName];

        currentPassport = worksheet["E11"] ? worksheet["E11"].v : null;
        currentPnfl = worksheet["E12"] ? worksheet["E12"].w : null;

        await logToFile(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${file.name}, –ü–ù–§–õ: ${currentPnfl}`);

        if (!currentPnfl) {
          await logToFile(
            `–ü—Ä–æ–ø—É—Å–∫ —Ñ–∞–π–ª–∞ ${file.name}: –Ω–µ –Ω–∞–π–¥–µ–Ω –ü–ù–§–õ`,
            "warning"
          );
          processedFiles++;
          await updateProgress(processedFiles);
          return {
            fileName: file.name,
            status: "error",
            message: `‚ùå –ü–ù–§–õ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ\nüìÑ –§–∞–π–ª: ${file.name}`,
          };
        }

        // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (datedocv4)
        const passportData = await fetchPassportDataV4(currentPnfl, sessionId);
        await logToFile(
          `–†–µ–∑—É–ª—å—Ç–∞—Ç datedocv4 –¥–ª—è —Ñ–∞–π–ª–∞ ${file.name}: ${passportData?.result}`
        );

        // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
        if (passportData && passportData.result === 1) {
          processedFiles++;
          await updateProgress(processedFiles);
          return {
            fileName: file.name,
            status: "success",
          };
        }

        // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω, –ø—Ä–æ–±—É–µ–º –≤—Ç–æ—Ä–æ–π (datedocv2)
        await logToFile(`–ü—Ä–æ–±—É–µ–º datedocv2 –¥–ª—è —Ñ–∞–π–ª–∞ ${file.name}`);
        const birthDate = extractDateOfBirth(currentPnfl);
        const documentNum = currentPassport || "";
        const additionalData = await fetchPassportDataV2(
          birthDate,
          documentNum,
          sessionId
        );
        await logToFile(
          `–†–µ–∑—É–ª—å—Ç–∞—Ç datedocv2 –¥–ª—è —Ñ–∞–π–ª–∞ ${file.name}: ${additionalData?.result}`
        );

        // –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
        if (additionalData && additionalData.result === 1) {
          processedFiles++;
          await updateProgress(processedFiles);
          return {
            fileName: file.name,
            status: "success",
          };
        }

        // –ï—Å–ª–∏ –æ–±–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ—É—Å–ø–µ—à–Ω—ã
        processedFiles++;
        await updateProgress(processedFiles);
        return {
          fileName: file.name,
          status: "error",
          message: `üìÑ –§–∞–π–ª: ${file.name}\n‚ö†Ô∏è –û—à–∏–±–∫–∏:\n- ${passportData?.queryld || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}\n- ${additionalData?.queryld || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`,
        };
      } catch (error) {
        await logToFile(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${file.name}: ${error.message}`,
          "error"
        );
        processedFiles++;
        await updateProgress(processedFiles);
        return {
          fileName: file.name,
          status: "error",
          message: `üìÑ –§–∞–π–ª: ${file.name}\n${currentPnfl}\n‚ö†Ô∏è –û—à–∏–±–∫–∞: ${error.message}`,
        };
      }
    });

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–∞—á–∫–∏
    const batchResults = await Promise.all(batchPromises);
    allResults.push(...batchResults);
    await logToFile(`–ü–∞—á–∫–∞ ${Math.floor(i / batchSize) + 1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞`);
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  try {
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
    const errorResults = allResults.filter(
      (result) => result.status === "error"
    );

    if (errorResults.length > 0) {
      let message = "‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:\n\n";

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
      for (const result of errorResults) {
        message += `${result.message}\n\n`;
      }

      await safeUpdateMessage(bot, message, messageId, chatId);
    } else {
      // –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      await safeUpdateMessage(
        bot,
        `${config.messages.progress.allFilesSuccess}\n${config.messages.progress.totalProcessed} ${allResults.length} —Ñ–∞–π–ª–æ–≤`,
        messageId,
        chatId
      );
    }
  } catch (error) {
    await logToFile(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`,
      "error"
    );
    // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    try {
      await bot.sendMessage(
        chatId,
        config.messages.errors.messageUpdate
      );
    } catch (sendError) {
      await logToFile(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${sendError.message}`,
        "error"
      );
    }
  }

  return allResults;
}

module.exports = {
  processBatchFiles,
  safeUpdateMessage
}; 